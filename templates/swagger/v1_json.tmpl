{
  "consumes": [
  "application/json",
  "text/plain"
],
  "produces": [
  "application/json",
  "text/html"
],
  "schemes": [
  "http",
  "https"
],
  "swagger": "2.0",
  "info": {
  "title": "kucid API.",
    "version": "{{AppVer | JSEscape | Safe}}"
},
  "basePath": "{{AppSubUrl | JSEscape | Safe}}/api/v1",
  "paths": {
  "/admin/cron": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "List cron tasks",
        "operationId": "adminCronList",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CronList"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/admin/cron/{task}": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Run cron task",
        "operationId": "adminCronRun",
        "parameters": [
        {
          "type": "string",
          "description": "task to run",
          "name": "task",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/admin/hooks": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "List system's webhooks",
        "operationId": "adminListHooks",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/HookList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Create a hook",
        "operationId": "adminCreateHook",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateHookOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Hook"
        }
      }
    }
  },
  "/admin/hooks/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Get a hook",
        "operationId": "adminGetHook",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Hook"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Update a hook",
        "operationId": "adminEditHook",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to update",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditHookOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Hook"
        }
      }
    }
  },
  "/admin/unadopted": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "List unadopted repositories",
        "operationId": "adminUnadoptedList",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        },
        {
          "type": "string",
          "description": "pattern of repositories to search for",
          "name": "pattern",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/StringSlice"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/admin/unadopted/{owner}/{repo}": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Adopt unadopted files as a repository",
        "operationId": "adminAdoptRepository",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Delete unadopted files",
        "operationId": "adminDeleteUnadoptedRepository",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/admin/users": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "List all users",
        "operationId": "adminGetAllUsers",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Create a user",
        "operationId": "adminCreateUser",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateUserOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/User"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/admin/users/{username}": {
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Delete a user",
        "operationId": "adminDeleteUser",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to delete",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Edit an existing user",
        "operationId": "adminEditUser",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to edit",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditUserOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/User"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/admin/users/{username}/keys": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Add a public key on behalf of a user",
        "operationId": "adminCreatePublicKey",
        "parameters": [
        {
          "type": "string",
          "description": "username of the user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "name": "key",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateKeyOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PublicKey"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/admin/users/{username}/keys/{id}": {
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Delete a user's public key",
        "operationId": "adminDeleteUserPublicKey",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the key to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/admin/users/{username}/repos": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Create a repository on behalf of a user",
        "operationId": "adminCreateRepo",
        "parameters": [
        {
          "type": "string",
          "description": "username of the user. This user will own the created repository",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "name": "repository",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateRepoOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "409": {
          "$ref": "#/responses/error"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/amdin/hooks/{id}": {
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "admin"
      ],
        "summary": "Delete a hook",
        "operationId": "adminDeleteHook",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/repos/migrate": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Migrate a remote git repository",
        "operationId": "repoMigrate",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MigrateRepoOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "409": {
          "description": "The repository with the same name already exists."
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/search": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Search for repositories",
        "operationId": "repoSearch",
        "parameters": [
        {
          "type": "string",
          "description": "keyword",
          "name": "q",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "Limit search to repositories with keyword as topic",
          "name": "topic",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "include search of keyword within repository description",
          "name": "includeDesc",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "search only for repos that the user with the given id owns or contributes to",
          "name": "uid",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "repo owner to prioritize in the results",
          "name": "priority_owner_id",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "search only for repos that belong to the given team id",
          "name": "team_id",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "search only for repos that the user with the given id has starred",
          "name": "starredBy",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "include private repositories this user has access to (defaults to true)",
          "name": "private",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "show only pubic, private or all repositories (defaults to all)",
          "name": "is_private",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "include template repositories this user has access to (defaults to true)",
          "name": "template",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "show only archived, non-archived or all repositories (defaults to all)",
          "name": "archived",
          "in": "query"
        },
        {
          "type": "string",
          "description": "type of repository to search for. Supported values are \"fork\", \"source\", \"mirror\" and \"collaborative\"",
          "name": "mode",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "if `uid` is given, search only for repos that the user owns",
          "name": "exclusive",
          "in": "query"
        },
        {
          "type": "string",
          "description": "sort repos by attribute. Supported values are \"alpha\", \"created\", \"updated\", \"size\", and \"id\". Default is \"alpha\"",
          "name": "sort",
          "in": "query"
        },
        {
          "type": "string",
          "description": "sort order, either \"asc\" (ascending) or \"desc\" (descending). Default is \"asc\", ignored if \"sort\" is not specified.",
          "name": "order",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/SearchResults"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a repository",
        "operationId": "repoGet",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Repository"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a repository",
        "operationId": "repoDelete",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to delete",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to delete",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    },
    "patch": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a repository's properties. Only fields that are set will be changed.",
        "operationId": "repoEdit",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to edit",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to edit",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "description": "Properties of a repo that you can edit",
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditRepoOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/archive/{archive}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get an archive of a repository",
        "operationId": "repoGetArchive",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "the git reference for download with attached archive format (e.g. master.zip)",
          "name": "archive",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "description": "success"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/assignees": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Return all users that have write access and can be assigned to issues",
        "operationId": "repoGetAssignees",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/branch_protections": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List branch protections for a repository",
        "operationId": "repoListBranchProtection",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/BranchProtectionList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a branch protections for a repository",
        "operationId": "repoCreateBranchProtection",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateBranchProtectionOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/BranchProtection"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/branch_protections/{name}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a specific branch protection for the repository",
        "operationId": "repoGetBranchProtection",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of protected branch",
          "name": "name",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/BranchProtection"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a specific branch protection for the repository",
        "operationId": "repoDeleteBranchProtection",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of protected branch",
          "name": "name",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a branch protections for a repository. Only fields that are set will be changed",
        "operationId": "repoEditBranchProtection",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of protected branch",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditBranchProtectionOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/BranchProtection"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/branches": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repository's branches",
        "operationId": "repoListBranches",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/BranchList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a branch",
        "operationId": "repoCreateBranch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateBranchRepoOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Branch"
        },
        "404": {
          "description": "The old branch does not exist."
        },
        "409": {
          "description": "The branch with the same name already exists."
        }
      }
    }
  },
  "/repos/{owner}/{repo}/branches/{branch}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Retrieve a specific branch from a repository, including its effective branch protection",
        "operationId": "repoGetBranch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "branch to get",
          "name": "branch",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Branch"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a specific branch from a repository",
        "operationId": "repoDeleteBranch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "branch to delete",
          "name": "branch",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/error"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/collaborators": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repository's collaborators",
        "operationId": "repoListCollaborators",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/collaborators/{collaborator}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Check if a user is a collaborator of a repository",
        "operationId": "repoCheckCollaborator",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of the collaborator",
          "name": "collaborator",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "put": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Add a collaborator to a repository",
        "operationId": "repoAddCollaborator",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of the collaborator to add",
          "name": "collaborator",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/AddCollaboratorOption"
          }
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a collaborator from a repository",
        "operationId": "repoDeleteCollaborator",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of the collaborator to delete",
          "name": "collaborator",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/collaborators/{collaborator}/permission": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get repository permissions for a user",
        "operationId": "repoGetRepoPermissions",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of the collaborator",
          "name": "collaborator",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepoCollaboratorPermission"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/commits": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a list of all commits from a repository",
        "operationId": "repoGetAllCommits",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "SHA or branch to start listing commits from (usually 'master')",
          "name": "sha",
          "in": "query"
        },
        {
          "type": "string",
          "description": "filepath of a file/dir",
          "name": "path",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "include diff stats for every commit (disable for speedup, default 'true')",
          "name": "stat",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results (ignored if used with 'path')",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CommitList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "409": {
          "$ref": "#/responses/EmptyRepository"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/commits/{ref}/status": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a commit's combined status, by branch/tag/commit reference",
        "operationId": "repoGetCombinedStatusByRef",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of branch/tag/commit",
          "name": "ref",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CombinedStatus"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/commits/{ref}/statuses": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a commit's statuses, by branch/tag/commit reference",
        "operationId": "repoListStatusesByRef",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of branch/tag/commit",
          "name": "ref",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "oldest",
            "recentupdate",
            "leastupdate",
            "leastindex",
            "highestindex"
          ],
          "type": "string",
          "description": "type of sort",
          "name": "sort",
          "in": "query"
        },
        {
          "enum": [
            "pending",
            "success",
            "error",
            "failure",
            "warning"
          ],
          "type": "string",
          "description": "type of state",
          "name": "state",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CommitStatusList"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/contents": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the metadata of all the entries of the root dir",
        "operationId": "repoGetContentsList",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ContentsListResponse"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/contents/{filepath}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir",
        "operationId": "repoGetContents",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "path of the dir, file, symlink or submodule in the repo",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ContentsResponse"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "put": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Update a file in a repository",
        "operationId": "repoUpdateFile",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "path of the file to update",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/UpdateFileOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/FileResponse"
        },
        "403": {
          "$ref": "#/responses/error"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/error"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a file in a repository",
        "operationId": "repoCreateFile",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "path of the file to create",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateFileOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/FileResponse"
        },
        "403": {
          "$ref": "#/responses/error"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/error"
        }
      }
    },
    "delete": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a file in a repository",
        "operationId": "repoDeleteFile",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "path of the file to delete",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/DeleteFileOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/FileDeleteResponse"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/error"
        },
        "404": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/diffpatch": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Apply diff patch to repository",
        "operationId": "repoApplyDiffPatch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/UpdateFileOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/FileResponse"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/editorconfig/{filepath}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get the EditorConfig definitions of a file in a repository",
        "operationId": "repoGetEditorConfig",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "filepath of file to get",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "description": "success"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/forks": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repository's forks",
        "operationId": "listForks",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Fork a repository",
        "operationId": "createFork",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to fork",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to fork",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateForkOption"
          }
        }
      ],
        "responses": {
        "202": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "409": {
          "description": "The repository with the same name already exists."
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/blobs/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the blob of a repository.",
        "operationId": "GetBlob",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "sha of the commit",
          "name": "sha",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GitBlobResponse"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/commits/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a single commit from a repository",
        "operationId": "repoGetSingleCommit",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "a git ref or commit sha",
          "name": "sha",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Commit"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/commits/{sha}.{diffType}": {
    "get": {
      "produces": [
        "text/plain"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a commit's diff or patch",
        "operationId": "repoDownloadCommitDiffOrPatch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "SHA of the commit to get",
          "name": "sha",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "diff",
            "patch"
          ],
          "type": "string",
          "description": "whether the output is diff or patch",
          "name": "diffType",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/string"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/notes/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a note corresponding to a single commit from a repository",
        "operationId": "repoGetNote",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "a git ref or commit sha",
          "name": "sha",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Note"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/refs": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListAllGitRefs",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ReferenceList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/refs/{ref}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get specified ref or filtered repository's refs",
        "operationId": "repoListGitRefs",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "part or full name of the ref",
          "name": "ref",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ReferenceList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/tags/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the tag object of an annotated tag (not lightweight tags)",
        "operationId": "GetAnnotatedTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.",
          "name": "sha",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/AnnotatedTag"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/git/trees/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the tree of a repository.",
        "operationId": "GetTree",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "sha of the commit",
          "name": "sha",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "description": "show all directories and files",
          "name": "recursive",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number; the 'truncated' field in the response will be true if there are still more items after this page, false if the last page",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "number of items per page",
          "name": "per_page",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GitTreeResponse"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/hooks": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List the hooks in a repository",
        "operationId": "repoListHooks",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/HookList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a hook",
        "operationId": "repoCreateHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateHookOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Hook"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/hooks/git": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List the Git hooks in a repository",
        "operationId": "repoListGitHooks",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GitHookList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/hooks/git/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a Git hook",
        "operationId": "repoGetGitHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "id of the hook to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GitHook"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a Git hook in a repository",
        "operationId": "repoDeleteGitHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "id of the hook to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a Git hook in a repository",
        "operationId": "repoEditGitHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "id of the hook to get",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditGitHookOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GitHook"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/hooks/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a hook",
        "operationId": "repoGetHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Hook"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a hook in a repository",
        "operationId": "repoDeleteHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a hook in a repository",
        "operationId": "repoEditHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the hook",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditHookOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Hook"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/hooks/{id}/tests": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Test a push webhook",
        "operationId": "repoTestHook",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the hook to test",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag, indicates which commit will be loaded to the webhook payload.",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/keys": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repository's keys",
        "operationId": "repoListKeys",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "the key_id to search for",
          "name": "key_id",
          "in": "query"
        },
        {
          "type": "string",
          "description": "fingerprint of the key",
          "name": "fingerprint",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/DeployKeyList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Add a key to a repository",
        "operationId": "repoCreateKey",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateKeyOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/DeployKey"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/keys/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a repository's key by id",
        "operationId": "repoGetKey",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the key to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/DeployKey"
        }
      }
    },
    "delete": {
      "tags": [
        "repository"
      ],
        "summary": "Delete a key from a repository",
        "operationId": "repoDeleteKey",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the key to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/languages": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get languages and number of bytes of code written",
        "operationId": "repoGetLanguages",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/LanguageStatistics"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/media/{filepath}": {
    "get": {
      "tags": [
        "repository"
      ],
        "summary": "Get a file or it's LFS object from a repository",
        "operationId": "repoGetRawFileOrLFS",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "filepath of the file to get",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "description": "Returns raw file content."
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/mirror-sync": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Sync a mirrored repository",
        "operationId": "repoMirrorSync",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to sync",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to sync",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repo's pull requests",
        "operationId": "repoListPullRequests",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "closed",
            "open",
            "all"
          ],
          "type": "string",
          "description": "State of pull request: open or closed (optional)",
          "name": "state",
          "in": "query"
        },
        {
          "enum": [
            "oldest",
            "recentupdate",
            "leastupdate",
            "mostcomment",
            "leastcomment",
            "priority"
          ],
          "type": "string",
          "description": "Type of sort",
          "name": "sort",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the milestone",
          "name": "milestone",
          "in": "query"
        },
        {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "collectionFormat": "multi",
          "description": "Label IDs",
          "name": "labels",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullRequestList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a pull request",
        "operationId": "repoCreatePullRequest",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreatePullRequestOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PullRequest"
        },
        "409": {
          "$ref": "#/responses/error"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a pull request",
        "operationId": "repoGetPullRequest",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to get",
          "name": "index",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullRequest"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.",
        "operationId": "repoEditPullRequest",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to edit",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditPullRequestOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PullRequest"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "409": {
          "$ref": "#/responses/error"
        },
        "412": {
          "$ref": "#/responses/error"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}.{diffType}": {
    "get": {
      "produces": [
        "text/plain"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a pull request diff or patch",
        "operationId": "repoDownloadPullDiffOrPatch",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to get",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "diff",
            "patch"
          ],
          "type": "string",
          "description": "whether the output is diff or patch",
          "name": "diffType",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "description": "whether to include binary file changes. if true, the diff is applicable with `git apply`",
          "name": "binary",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/string"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/commits": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get commits for a pull request",
        "operationId": "repoGetPullRequestCommits",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to get",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CommitList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/files": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get changed files for a pull request",
        "operationId": "repoGetPullRequestFiles",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to get",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "skip to given file",
          "name": "skip-to",
          "in": "query"
        },
        {
          "enum": [
            "ignore-all",
            "ignore-change",
            "ignore-eol",
            "show-all"
          ],
          "type": "string",
          "description": "whitespace behavior",
          "name": "whitespace",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ChangedFileList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/merge": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Check if a pull request has been merged",
        "operationId": "repoPullRequestIsMerged",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "description": "pull request has been merged"
        },
        "404": {
          "description": "pull request has not been merged"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Merge a pull request",
        "operationId": "repoMergePullRequest",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to merge",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/MergePullRequestOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/empty"
        },
        "405": {
          "$ref": "#/responses/empty"
        },
        "409": {
          "$ref": "#/responses/error"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Cancel the scheduled auto merge for the given pull request",
        "operationId": "repoCancelScheduledAutoMerge",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to merge",
          "name": "index",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "create review requests for a pull request",
        "operationId": "repoCreatePullReviewRequests",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/PullReviewRequestOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PullReviewList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "cancel review requests for a pull request",
        "operationId": "repoDeletePullReviewRequests",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/PullReviewRequestOptions"
          }
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/reviews": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List all reviews for a pull request",
        "operationId": "repoListPullReviews",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReviewList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a review to an pull request",
        "operationId": "repoCreatePullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreatePullReviewOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReview"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a specific review for a pull request",
        "operationId": "repoGetPullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReview"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Submit a pending review to an pull request",
        "operationId": "repoSubmitPullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/SubmitPullReviewOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReview"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a specific review from a pull request",
        "operationId": "repoDeletePullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a specific review for a pull request",
        "operationId": "repoGetPullReviewComments",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReviewCommentList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Dismiss a review for a pull request",
        "operationId": "repoDismissPullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/DismissPullReviewOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReview"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Cancel to dismiss a review for a pull request",
        "operationId": "repoUnDismissPullReview",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the review",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PullReview"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/pulls/{index}/update": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Merge PR's baseBranch into headBranch",
        "operationId": "repoUpdatePullRequest",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "index of the pull request to get",
          "name": "index",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "merge",
            "rebase"
          ],
          "type": "string",
          "description": "how to update pull request",
          "name": "style",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "409": {
          "$ref": "#/responses/error"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/push_mirrors": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get all push mirrors of the repository",
        "operationId": "repoListPushMirrors",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PushMirrorList"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "add a push mirror to the repository",
        "operationId": "repoAddPushMirror",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreatePushMirrorOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PushMirror"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/push_mirrors-sync": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Sync all push mirrored repository",
        "operationId": "repoPushMirrorSync",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to sync",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to sync",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/empty"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/push_mirrors/{name}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get push mirror of the repository by remoteName",
        "operationId": "repoGetPushMirrorByRemoteName",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "remote name of push mirror",
          "name": "name",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PushMirror"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "deletes a push mirror from a repository by remoteName",
        "operationId": "repoDeletePushMirror",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "remote name of the pushMirror",
          "name": "name",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/raw/{filepath}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a file from a repository",
        "operationId": "repoGetRawFile",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "filepath of the file to get",
          "name": "filepath",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default the repository’s default branch (usually master)",
          "name": "ref",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "description": "Returns raw file content."
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repo's releases",
        "operationId": "repoListReleases",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "description": "filter (exclude / include) drafts, if you dont have repo write access none will show",
          "name": "draft",
          "in": "query"
        },
        {
          "type": "boolean",
          "description": "filter (exclude / include) pre-releases",
          "name": "pre-release",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results, deprecated - use limit",
          "name": "per_page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/ReleaseList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a release",
        "operationId": "repoCreateRelease",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateReleaseOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Release"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "409": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases/latest": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at",
        "operationId": "repoGetLatestRelease",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Release"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases/tags/{tag}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a release by tag name",
        "operationId": "repoGetReleaseByTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "tag name of the release to get",
          "name": "tag",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Release"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "tags": [
        "repository"
      ],
        "summary": "Delete a release by tag name",
        "operationId": "repoDeleteReleaseByTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "tag name of the release to delete",
          "name": "tag",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "405": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a release",
        "operationId": "repoGetRelease",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Release"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "tags": [
        "repository"
      ],
        "summary": "Delete a release",
        "operationId": "repoDeleteRelease",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "405": {
          "$ref": "#/responses/empty"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Update a release",
        "operationId": "repoEditRelease",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release to edit",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditReleaseOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Release"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases/{id}/assets": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List release's attachments",
        "operationId": "repoListReleaseAttachments",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/AttachmentList"
        }
      }
    },
    "post": {
      "consumes": [
        "multipart/form-data"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a release attachment",
        "operationId": "repoCreateReleaseAttachment",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the attachment",
          "name": "name",
          "in": "query"
        },
        {
          "type": "file",
          "description": "attachment to upload",
          "name": "attachment",
          "in": "formData",
          "required": true
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Attachment"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a release attachment",
        "operationId": "repoGetReleaseAttachment",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the attachment to get",
          "name": "attachment_id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Attachment"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a release attachment",
        "operationId": "repoDeleteReleaseAttachment",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the attachment to delete",
          "name": "attachment_id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a release attachment",
        "operationId": "repoEditReleaseAttachment",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the release",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the attachment to edit",
          "name": "attachment_id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/EditAttachmentOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Attachment"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/reviewers": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Return all users that can be requested to review in this repo",
        "operationId": "repoGetReviewers",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/stargazers": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repo's stargazers",
        "operationId": "repoListStargazers",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/statuses/{sha}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a commit's statuses",
        "operationId": "repoListStatuses",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "sha of the commit",
          "name": "sha",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "oldest",
            "recentupdate",
            "leastupdate",
            "leastindex",
            "highestindex"
          ],
          "type": "string",
          "description": "type of sort",
          "name": "sort",
          "in": "query"
        },
        {
          "enum": [
            "pending",
            "success",
            "error",
            "failure",
            "warning"
          ],
          "type": "string",
          "description": "type of state",
          "name": "state",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/CommitStatusList"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a commit status",
        "operationId": "repoCreateStatus",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "sha of the commit",
          "name": "sha",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateStatusOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/CommitStatus"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/subscribers": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repo's watchers",
        "operationId": "repoListSubscribers",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/subscription": {
    "get": {
      "tags": [
        "repository"
      ],
        "summary": "Check if the current user is watching a repo",
        "operationId": "userCurrentCheckSubscription",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WatchInfo"
        },
        "404": {
          "description": "User is not watching this repo or repo do not exist"
        }
      }
    },
    "put": {
      "tags": [
        "repository"
      ],
        "summary": "Watch a repo",
        "operationId": "userCurrentPutSubscription",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WatchInfo"
        }
      }
    },
    "delete": {
      "tags": [
        "repository"
      ],
        "summary": "Unwatch a repo",
        "operationId": "userCurrentDeleteSubscription",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/tags": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repository's tags",
        "operationId": "repoListTags",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results, default maximum page size is 50",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TagList"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a new git tag in a repository",
        "operationId": "repoCreateTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateTagOption"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Tag"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "405": {
          "$ref": "#/responses/empty"
        },
        "409": {
          "$ref": "#/responses/conflict"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/tags/{tag}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get the tag of a repository by tag name",
        "operationId": "repoGetTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of tag",
          "name": "tag",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Tag"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a repository's tag by name",
        "operationId": "repoDeleteTag",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of tag to delete",
          "name": "tag",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "405": {
          "$ref": "#/responses/empty"
        },
        "409": {
          "$ref": "#/responses/conflict"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/times": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a repo's tracked times",
        "operationId": "repoTrackedTimes",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "optional filter by user (available for issue managers)",
          "name": "user",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format",
          "name": "since",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format",
          "name": "before",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TrackedTimeList"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/times/{user}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "List a user's tracked times in a repo",
        "operationId": "userTrackedTimes",
        "deprecated": true,
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of user",
          "name": "user",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TrackedTimeList"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/topics": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get list of topics that a repository has",
        "operationId": "repoListTopics",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TopicNames"
        }
      }
    },
    "put": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Replace list of topics for a repository",
        "operationId": "repoUpdateTopics",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/RepoTopicOptions"
          }
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "422": {
          "$ref": "#/responses/invalidTopicsError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/topics/{topic}": {
    "put": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Add a topic to a repository",
        "operationId": "repoAddTopic",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the topic to add",
          "name": "topic",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "422": {
          "$ref": "#/responses/invalidTopicsError"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Delete a topic from a repository",
        "operationId": "repoDeleteTopic",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the topic to delete",
          "name": "topic",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "422": {
          "$ref": "#/responses/invalidTopicsError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/transfer": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Transfer a repo ownership",
        "operationId": "repoTransfer",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to transfer",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to transfer",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "description": "Transfer Options",
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/TransferRepoOption"
          }
        }
      ],
        "responses": {
        "202": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/transfer/accept": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Accept a repo transfer",
        "operationId": "acceptRepoTransfer",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to transfer",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to transfer",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "202": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/transfer/reject": {
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Reject a repo transfer",
        "operationId": "rejectRepoTransfer",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to transfer",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to transfer",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/wiki/new": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a wiki page",
        "operationId": "repoCreateWikiPage",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateWikiPageOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/WikiPage"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/wiki/page/{pageName}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a wiki page",
        "operationId": "repoGetWikiPage",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the page",
          "name": "pageName",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WikiPage"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "tags": [
        "repository"
      ],
        "summary": "Delete a wiki page",
        "operationId": "repoDeleteWikiPage",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the page",
          "name": "pageName",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "consumes": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Edit a wiki page",
        "operationId": "repoEditWikiPage",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the page",
          "name": "pageName",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateWikiPageOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WikiPage"
        },
        "400": {
          "$ref": "#/responses/error"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/wiki/pages": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get all wiki pages",
        "operationId": "repoGetWikiPages",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WikiPageList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{owner}/{repo}/wiki/revisions/{pageName}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get revisions of a wiki page",
        "operationId": "repoGetWikiPageRevisions",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the page",
          "name": "pageName",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/WikiCommitList"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/repos/{template_owner}/{template_repo}/generate": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Create a repository using a template",
        "operationId": "generateRepo",
        "parameters": [
        {
          "type": "string",
          "description": "name of the template repository owner",
          "name": "template_owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the template repository",
          "name": "template_repo",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/GenerateRepoOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Repository"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "409": {
          "description": "The repository with the same name already exists."
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/repositories/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "Get a repository by id",
        "operationId": "repoGetByID",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of the repo to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/Repository"
        }
      }
    }
  },
  "/settings/api": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "settings"
      ],
        "summary": "Get instance's global settings for api",
        "operationId": "getGeneralAPISettings",
        "responses": {
        "200": {
          "$ref": "#/responses/GeneralAPISettings"
        }
      }
    }
  },
  "/settings/attachment": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "settings"
      ],
        "summary": "Get instance's global settings for Attachment",
        "operationId": "getGeneralAttachmentSettings",
        "responses": {
        "200": {
          "$ref": "#/responses/GeneralAttachmentSettings"
        }
      }
    }
  },
  "/settings/repository": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "settings"
      ],
        "summary": "Get instance's global settings for repositories",
        "operationId": "getGeneralRepositorySettings",
        "responses": {
        "200": {
          "$ref": "#/responses/GeneralRepoSettings"
        }
      }
    }
  },
  "/settings/ui": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "settings"
      ],
        "summary": "Get instance's global settings for ui",
        "operationId": "getGeneralUISettings",
        "responses": {
        "200": {
          "$ref": "#/responses/GeneralUISettings"
        }
      }
    }
  },
  "/topics/search": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "repository"
      ],
        "summary": "search topics via keyword",
        "operationId": "topicSearch",
        "parameters": [
        {
          "type": "string",
          "description": "keywords to search",
          "name": "q",
          "in": "query",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TopicListResponse"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        }
      }
    }
  },
  "/user": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get the authenticated user",
        "operationId": "userGetCurrent",
        "responses": {
        "200": {
          "$ref": "#/responses/User"
        }
      }
    }
  },
  "/user/applications/oauth2": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's oauth2 applications",
        "operationId": "userGetOauth2Application",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/OAuth2ApplicationList"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "creates a new OAuth2 application",
        "operationId": "userCreateOAuth2Application",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateOAuth2ApplicationOptions"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/OAuth2Application"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/user/applications/oauth2/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "get an OAuth2 Application",
        "operationId": "userGetOAuth2Application",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "Application ID to be found",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/OAuth2Application"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "delete an OAuth2 Application",
        "operationId": "userDeleteOAuth2Application",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "token to be deleted",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "patch": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "update an OAuth2 Application, this includes regenerating the client secret",
        "operationId": "userUpdateOAuth2Application",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "application to be updated",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateOAuth2ApplicationOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/OAuth2Application"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/user/emails": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's email addresses",
        "operationId": "userListEmails",
        "responses": {
        "200": {
          "$ref": "#/responses/EmailList"
        }
      }
    },
    "post": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Add email addresses",
        "operationId": "userAddEmail",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateEmailOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/EmailList"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Delete email addresses",
        "operationId": "userDeleteEmail",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/DeleteEmailOption"
          }
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/user/followers": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's followers",
        "operationId": "userCurrentListFollowers",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/user/following": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the users that the authenticated user is following",
        "operationId": "userCurrentListFollowing",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/user/following/{username}": {
    "get": {
      "tags": [
        "user"
      ],
        "summary": "Check whether a user is followed by the authenticated user",
        "operationId": "userCurrentCheckFollowing",
        "parameters": [
        {
          "type": "string",
          "description": "username of followed user",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "put": {
      "tags": [
        "user"
      ],
        "summary": "Follow a user",
        "operationId": "userCurrentPutFollow",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to follow",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    },
    "delete": {
      "tags": [
        "user"
      ],
        "summary": "Unfollow a user",
        "operationId": "userCurrentDeleteFollow",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to unfollow",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/user/gpg_key_token": {
    "get": {
      "produces": [
        "text/plain"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get a Token to verify",
        "operationId": "getVerificationToken",
        "responses": {
        "200": {
          "$ref": "#/responses/string"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/user/gpg_key_verify": {
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Verify a GPG key",
        "operationId": "userVerifyGPGKey",
        "responses": {
        "201": {
          "$ref": "#/responses/GPGKey"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/user/gpg_keys": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's GPG keys",
        "operationId": "userCurrentListGPGKeys",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GPGKeyList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Create a GPG key",
        "operationId": "userCurrentPostGPGKey",
        "parameters": [
        {
          "name": "Form",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateGPGKeyOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/GPGKey"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/user/gpg_keys/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get a GPG key",
        "operationId": "userCurrentGetGPGKey",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of key to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GPGKey"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Remove a GPG key",
        "operationId": "userCurrentDeleteGPGKey",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of key to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/user/keys": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's public keys",
        "operationId": "userCurrentListKeys",
        "parameters": [
        {
          "type": "string",
          "description": "fingerprint of the key",
          "name": "fingerprint",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PublicKeyList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Create a public key",
        "operationId": "userCurrentPostKey",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateKeyOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/PublicKey"
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/user/keys/{id}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get a public key",
        "operationId": "userCurrentGetKey",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of key to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PublicKey"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Delete a public key",
        "operationId": "userCurrentDeleteKey",
        "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "id of key to delete",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "403": {
          "$ref": "#/responses/forbidden"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/user/repos": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the repos that the authenticated user owns",
        "operationId": "userCurrentListRepos",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "repository",
        "user"
      ],
        "summary": "Create a repository",
        "operationId": "createCurrentUserRepo",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateRepoOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/Repository"
        },
        "409": {
          "description": "The repository with the same name already exists."
        },
        "422": {
          "$ref": "#/responses/validationError"
        }
      }
    }
  },
  "/user/settings": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get user settings",
        "operationId": "getUserSettings",
        "responses": {
        "200": {
          "$ref": "#/responses/UserSettings"
        }
      }
    },
    "patch": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Update user settings",
        "operationId": "updateUserSettings",
        "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/UserSettingsOptions"
          }
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserSettings"
        }
      }
    }
  },
  "/user/starred": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "The repos that the authenticated user has starred",
        "operationId": "userCurrentListStarred",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    }
  },
  "/user/starred/{owner}/{repo}": {
    "get": {
      "tags": [
        "user"
      ],
        "summary": "Whether the authenticated is starring the repo",
        "operationId": "userCurrentCheckStarring",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    },
    "put": {
      "tags": [
        "user"
      ],
        "summary": "Star the given repo",
        "operationId": "userCurrentPutStar",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to star",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to star",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    },
    "delete": {
      "tags": [
        "user"
      ],
        "summary": "Unstar the given repo",
        "operationId": "userCurrentDeleteStar",
        "parameters": [
        {
          "type": "string",
          "description": "owner of the repo to unstar",
          "name": "owner",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "name of the repo to unstar",
          "name": "repo",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        }
      }
    }
  },
  "/user/stopwatches": {
    "get": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get list of all existing stopwatches",
        "operationId": "userGetStopWatches",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/StopWatchList"
        }
      }
    }
  },
  "/user/subscriptions": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List repositories watched by the authenticated user",
        "operationId": "userCurrentListSubscriptions",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    }
  },
  "/user/times": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the current user's tracked times",
        "operationId": "userCurrentTrackedTimes",
        "parameters": [
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Only show times updated after the given time. This is a timestamp in RFC 3339 format",
          "name": "since",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Only show times updated before the given time. This is a timestamp in RFC 3339 format",
          "name": "before",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/TrackedTimeList"
        }
      }
    }
  },
  "/users/search": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Search for users",
        "operationId": "userSearch",
        "parameters": [
        {
          "type": "string",
          "description": "keyword",
          "name": "q",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the user to search for",
          "name": "uid",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "description": "SearchResults of a successful search",
            "schema": {
            "type": "object",
              "properties": {
              "data": {
                "type": "array",
                  "items": {
                  "$ref": "#/definitions/User"
                }
              },
              "ok": {
                "type": "boolean"
              }
            }
          }
        }
      }
    }
  },
  "/users/{username}": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get a user",
        "operationId": "userGet",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to get",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/User"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/users/{username}/followers": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the given user's followers",
        "operationId": "userListFollowers",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/users/{username}/following": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the users that the given user is following",
        "operationId": "userListFollowing",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserList"
        }
      }
    }
  },
  "/users/{username}/following/{target}": {
    "get": {
      "tags": [
        "user"
      ],
        "summary": "Check if one user is following another user",
        "operationId": "userCheckFollowing",
        "parameters": [
        {
          "type": "string",
          "description": "username of following user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "username of followed user",
          "name": "target",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/users/{username}/gpg_keys": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the given user's GPG keys",
        "operationId": "userListGPGKeys",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/GPGKeyList"
        }
      }
    }
  },
  "/users/{username}/heatmap": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Get a user's heatmap",
        "operationId": "userGetHeatmapData",
        "parameters": [
        {
          "type": "string",
          "description": "username of user to get",
          "name": "username",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/UserHeatmapData"
        },
        "404": {
          "$ref": "#/responses/notFound"
        }
      }
    }
  },
  "/users/{username}/keys": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the given user's public keys",
        "operationId": "userListKeys",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "fingerprint of the key",
          "name": "fingerprint",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/PublicKeyList"
        }
      }
    }
  },
  "/users/{username}/repos": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the repos owned by the given user",
        "operationId": "userListRepos",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    }
  },
  "/users/{username}/starred": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "The repos that the given user has starred",
        "operationId": "userListStarred",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    }
  },
  "/users/{username}/subscriptions": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the repositories watched by a user",
        "operationId": "userListSubscriptions",
        "parameters": [
        {
          "type": "string",
          "description": "username of the user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/RepositoryList"
        }
      }
    }
  },
  "/users/{username}/tokens": {
    "get": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "List the authenticated user's access tokens",
        "operationId": "userGetTokens",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "page number of results to return (1-based)",
          "name": "page",
          "in": "query"
        },
        {
          "type": "integer",
          "description": "page size of results",
          "name": "limit",
          "in": "query"
        }
      ],
        "responses": {
        "200": {
          "$ref": "#/responses/AccessTokenList"
        }
      }
    },
    "post": {
      "consumes": [
        "application/json"
      ],
        "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "Create an access token",
        "operationId": "userCreateToken",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/CreateAccessTokenOption"
          }
        }
      ],
        "responses": {
        "201": {
          "$ref": "#/responses/AccessToken"
        },
        "400": {
          "$ref": "#/responses/error"
        }
      }
    }
  },
  "/users/{username}/tokens/{token}": {
    "delete": {
      "produces": [
        "application/json"
      ],
        "tags": [
        "user"
      ],
        "summary": "delete an access token",
        "operationId": "userDeleteAccessToken",
        "parameters": [
        {
          "type": "string",
          "description": "username of user",
          "name": "username",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "token to be deleted, identified by ID and if not available by name",
          "name": "token",
          "in": "path",
          "required": true
        }
      ],
        "responses": {
        "204": {
          "$ref": "#/responses/empty"
        },
        "404": {
          "$ref": "#/responses/notFound"
        },
        "422": {
          "$ref": "#/responses/error"
        }
      }
    }
  }
},
  "responses": {
  "AccessToken": {
    "description": "AccessToken represents an API access token.",
      "schema": {
      "$ref": "#/definitions/AccessToken"
    }
  },
  "AccessTokenList": {
    "description": "AccessTokenList represents a list of API access token.",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/AccessToken"
      }
    }
  },
  "ActivityPub": {
    "description": "ActivityPub",
      "schema": {
      "$ref": "#/definitions/ActivityPub"
    }
  },
  "AnnotatedTag": {
    "description": "AnnotatedTag",
      "schema": {
      "$ref": "#/definitions/AnnotatedTag"
    }
  },
  "Attachment": {
    "description": "Attachment",
      "schema": {
      "$ref": "#/definitions/Attachment"
    }
  },
  "AttachmentList": {
    "description": "AttachmentList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Attachment"
      }
    }
  },
  "Branch": {
    "description": "Branch",
      "schema": {
      "$ref": "#/definitions/Branch"
    }
  },
  "BranchList": {
    "description": "BranchList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Branch"
      }
    }
  },
  "BranchProtection": {
    "description": "BranchProtection",
      "schema": {
      "$ref": "#/definitions/BranchProtection"
    }
  },
  "BranchProtectionList": {
    "description": "BranchProtectionList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/BranchProtection"
      }
    }
  },
  "ChangedFileList": {
    "description": "ChangedFileList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/ChangedFile"
      }
    },
    "headers": {
      "X-HasMore": {
        "type": "boolean",
          "description": "True if there is another page"
      },
      "X-Page": {
        "type": "integer",
          "format": "int64",
          "description": "The current page"
      },
      "X-PageCount": {
        "type": "integer",
          "format": "int64",
          "description": "Total number of pages"
      },
      "X-PerPage": {
        "type": "integer",
          "format": "int64",
          "description": "Commits per page"
      },
      "X-Total": {
        "type": "integer",
          "format": "int64",
          "description": "Total commit count"
      }
    }
  },
  "CombinedStatus": {
    "description": "CombinedStatus",
      "schema": {
      "$ref": "#/definitions/CombinedStatus"
    }
  },
  "Comment": {
    "description": "Comment",
      "schema": {
      "$ref": "#/definitions/Comment"
    }
  },
  "CommentList": {
    "description": "CommentList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Comment"
      }
    }
  },
  "Commit": {
    "description": "Commit",
      "schema": {
      "$ref": "#/definitions/Commit"
    }
  },
  "CommitList": {
    "description": "CommitList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Commit"
      }
    },
    "headers": {
      "X-HasMore": {
        "type": "boolean",
          "description": "True if there is another page"
      },
      "X-Page": {
        "type": "integer",
          "format": "int64",
          "description": "The current page"
      },
      "X-PageCount": {
        "type": "integer",
          "format": "int64",
          "description": "Total number of pages"
      },
      "X-PerPage": {
        "type": "integer",
          "format": "int64",
          "description": "Commits per page"
      },
      "X-Total": {
        "type": "integer",
          "format": "int64",
          "description": "Total commit count"
      }
    }
  },
  "CommitStatus": {
    "description": "CommitStatus",
      "schema": {
      "$ref": "#/definitions/CommitStatus"
    }
  },
  "CommitStatusList": {
    "description": "CommitStatusList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/CommitStatus"
      }
    }
  },
  "ContentsListResponse": {
    "description": "ContentsListResponse",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/ContentsResponse"
      }
    }
  },
  "ContentsResponse": {
    "description": "ContentsResponse",
      "schema": {
      "$ref": "#/definitions/ContentsResponse"
    }
  },
  "CronList": {
    "description": "CronList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Cron"
      }
    }
  },
  "DeployKey": {
    "description": "DeployKey",
      "schema": {
      "$ref": "#/definitions/DeployKey"
    }
  },
  "DeployKeyList": {
    "description": "DeployKeyList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/DeployKey"
      }
    }
  },
  "EmailList": {
    "description": "EmailList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Email"
      }
    }
  },
  "EmptyRepository": {
    "description": "EmptyRepository",
      "schema": {
      "$ref": "#/definitions/APIError"
    }
  },
  "FileDeleteResponse": {
    "description": "FileDeleteResponse",
      "schema": {
      "$ref": "#/definitions/FileDeleteResponse"
    }
  },
  "FileResponse": {
    "description": "FileResponse",
      "schema": {
      "$ref": "#/definitions/FileResponse"
    }
  },
  "GPGKey": {
    "description": "GPGKey",
      "schema": {
      "$ref": "#/definitions/GPGKey"
    }
  },
  "GPGKeyList": {
    "description": "GPGKeyList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/GPGKey"
      }
    }
  },
  "GeneralAPISettings": {
    "description": "GeneralAPISettings",
      "schema": {
      "$ref": "#/definitions/GeneralAPISettings"
    }
  },
  "GeneralAttachmentSettings": {
    "description": "GeneralAttachmentSettings",
      "schema": {
      "$ref": "#/definitions/GeneralAttachmentSettings"
    }
  },
  "GeneralRepoSettings": {
    "description": "GeneralRepoSettings",
      "schema": {
      "$ref": "#/definitions/GeneralRepoSettings"
    }
  },
  "GeneralUISettings": {
    "description": "GeneralUISettings",
      "schema": {
      "$ref": "#/definitions/GeneralUISettings"
    }
  },
  "GitBlobResponse": {
    "description": "GitBlobResponse",
      "schema": {
      "$ref": "#/definitions/GitBlobResponse"
    }
  },
  "GitHook": {
    "description": "GitHook",
      "schema": {
      "$ref": "#/definitions/GitHook"
    }
  },
  "GitHookList": {
    "description": "GitHookList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/GitHook"
      }
    }
  },
  "GitTreeResponse": {
    "description": "GitTreeResponse",
      "schema": {
      "$ref": "#/definitions/GitTreeResponse"
    }
  },
  "Hook": {
    "description": "Hook",
      "schema": {
      "$ref": "#/definitions/Hook"
    }
  },
  "HookList": {
    "description": "HookList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Hook"
      }
    }
  },
  "Issue": {
    "description": "Issue",
      "schema": {
      "$ref": "#/definitions/Issue"
    }
  },
  "IssueDeadline": {
    "description": "IssueDeadline",
      "schema": {
      "$ref": "#/definitions/IssueDeadline"
    }
  },
  "IssueList": {
    "description": "IssueList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Issue"
      }
    }
  },
  "IssueTemplates": {
    "description": "IssueTemplates",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/IssueTemplate"
      }
    }
  },
  "Label": {
    "description": "Label",
      "schema": {
      "$ref": "#/definitions/Label"
    }
  },
  "LabelList": {
    "description": "LabelList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Label"
      }
    }
  },
  "LanguageStatistics": {
    "description": "LanguageStatistics",
      "schema": {
      "type": "object",
        "additionalProperties": {
        "type": "integer",
          "format": "int64"
      }
    }
  },
  "MarkdownRender": {
    "description": "MarkdownRender is a rendered markdown document",
      "schema": {
      "type": "string"
    }
  },
  "Milestone": {
    "description": "Milestone",
      "schema": {
      "$ref": "#/definitions/Milestone"
    }
  },
  "MilestoneList": {
    "description": "MilestoneList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Milestone"
      }
    }
  },
  "NodeInfo": {
    "description": "NodeInfo",
      "schema": {
      "$ref": "#/definitions/NodeInfo"
    }
  },
  "Note": {
    "description": "Note",
      "schema": {
      "$ref": "#/definitions/Note"
    }
  },
  "NotificationCount": {
    "description": "Number of unread notifications",
      "schema": {
      "$ref": "#/definitions/NotificationCount"
    }
  },
  "NotificationThread": {
    "description": "NotificationThread",
      "schema": {
      "$ref": "#/definitions/NotificationThread"
    }
  },
  "NotificationThreadList": {
    "description": "NotificationThreadList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/NotificationThread"
      }
    }
  },
  "OAuth2Application": {
    "description": "OAuth2Application",
      "schema": {
      "$ref": "#/definitions/OAuth2Application"
    }
  },
  "OAuth2ApplicationList": {
    "description": "OAuth2ApplicationList represents a list of OAuth2 applications.",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/OAuth2Application"
      }
    }
  },
  "Organization": {
    "description": "Organization",
      "schema": {
      "$ref": "#/definitions/Organization"
    }
  },
  "OrganizationList": {
    "description": "OrganizationList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Organization"
      }
    }
  },
  "OrganizationPermissions": {
    "description": "OrganizationPermissions",
      "schema": {
      "$ref": "#/definitions/OrganizationPermissions"
    }
  },
  "Package": {
    "description": "Package",
      "schema": {
      "$ref": "#/definitions/Package"
    }
  },
  "PackageFileList": {
    "description": "PackageFileList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PackageFile"
      }
    }
  },
  "PackageList": {
    "description": "PackageList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Package"
      }
    }
  },
  "PublicKey": {
    "description": "PublicKey",
      "schema": {
      "$ref": "#/definitions/PublicKey"
    }
  },
  "PublicKeyList": {
    "description": "PublicKeyList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PublicKey"
      }
    }
  },
  "PullRequest": {
    "description": "PullRequest",
      "schema": {
      "$ref": "#/definitions/PullRequest"
    }
  },
  "PullRequestList": {
    "description": "PullRequestList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PullRequest"
      }
    }
  },
  "PullReview": {
    "description": "PullReview",
      "schema": {
      "$ref": "#/definitions/PullReview"
    }
  },
  "PullReviewComment": {
    "description": "PullComment",
      "schema": {
      "$ref": "#/definitions/PullReviewComment"
    }
  },
  "PullReviewCommentList": {
    "description": "PullCommentList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PullReviewComment"
      }
    }
  },
  "PullReviewList": {
    "description": "PullReviewList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PullReview"
      }
    }
  },
  "PushMirror": {
    "description": "PushMirror",
      "schema": {
      "$ref": "#/definitions/PushMirror"
    }
  },
  "PushMirrorList": {
    "description": "PushMirrorList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/PushMirror"
      }
    }
  },
  "Reaction": {
    "description": "Reaction",
      "schema": {
      "$ref": "#/definitions/Reaction"
    }
  },
  "ReactionList": {
    "description": "ReactionList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Reaction"
      }
    }
  },
  "Reference": {
    "description": "Reference",
      "schema": {
      "$ref": "#/definitions/Reference"
    }
  },
  "ReferenceList": {
    "description": "ReferenceList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Reference"
      }
    }
  },
  "Release": {
    "description": "Release",
      "schema": {
      "$ref": "#/definitions/Release"
    }
  },
  "ReleaseList": {
    "description": "ReleaseList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Release"
      }
    }
  },
  "RepoCollaboratorPermission": {
    "description": "RepoCollaboratorPermission",
      "schema": {
      "$ref": "#/definitions/RepoCollaboratorPermission"
    }
  },
  "Repository": {
    "description": "Repository",
      "schema": {
      "$ref": "#/definitions/Repository"
    }
  },
  "RepositoryList": {
    "description": "RepositoryList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Repository"
      }
    }
  },
  "SearchResults": {
    "description": "SearchResults",
      "schema": {
      "$ref": "#/definitions/SearchResults"
    }
  },
  "ServerVersion": {
    "description": "ServerVersion",
      "schema": {
      "$ref": "#/definitions/ServerVersion"
    }
  },
  "StopWatch": {
    "description": "StopWatch",
      "schema": {
      "$ref": "#/definitions/StopWatch"
    }
  },
  "StopWatchList": {
    "description": "StopWatchList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/StopWatch"
      }
    }
  },
  "StringSlice": {
    "description": "StringSlice",
      "schema": {
      "type": "array",
        "items": {
        "type": "string"
      }
    }
  },
  "Tag": {
    "description": "Tag",
      "schema": {
      "$ref": "#/definitions/Tag"
    }
  },
  "TagList": {
    "description": "TagList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Tag"
      }
    }
  },
  "Team": {
    "description": "Team",
      "schema": {
      "$ref": "#/definitions/Team"
    }
  },
  "TeamList": {
    "description": "TeamList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/Team"
      }
    }
  },
  "TimelineList": {
    "description": "TimelineList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/TimelineComment"
      }
    }
  },
  "TopicListResponse": {
    "description": "TopicListResponse",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/TopicResponse"
      }
    }
  },
  "TopicNames": {
    "description": "TopicNames",
      "schema": {
      "$ref": "#/definitions/TopicName"
    }
  },
  "TrackedTime": {
    "description": "TrackedTime",
      "schema": {
      "$ref": "#/definitions/TrackedTime"
    }
  },
  "TrackedTimeList": {
    "description": "TrackedTimeList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/TrackedTime"
      }
    }
  },
  "User": {
    "description": "User",
      "schema": {
      "$ref": "#/definitions/User"
    }
  },
  "UserHeatmapData": {
    "description": "UserHeatmapData",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/UserHeatmapData"
      }
    }
  },
  "UserList": {
    "description": "UserList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/User"
      }
    }
  },
  "UserSettings": {
    "description": "UserSettings",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/UserSettings"
      }
    }
  },
  "WatchInfo": {
    "description": "WatchInfo",
      "schema": {
      "$ref": "#/definitions/WatchInfo"
    }
  },
  "WikiCommitList": {
    "description": "WikiCommitList",
      "schema": {
      "$ref": "#/definitions/WikiCommitList"
    }
  },
  "WikiPage": {
    "description": "WikiPage",
      "schema": {
      "$ref": "#/definitions/WikiPage"
    }
  },
  "WikiPageList": {
    "description": "WikiPageList",
      "schema": {
      "type": "array",
        "items": {
        "$ref": "#/definitions/WikiPageMetaData"
      }
    }
  },
  "conflict": {
    "description": "APIConflict is a conflict empty response"
  },
  "empty": {
    "description": "APIEmpty is an empty response"
  },
  "error": {
    "description": "APIError is error format response",
      "headers": {
      "message": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  },
  "forbidden": {
    "description": "APIForbiddenError is a forbidden error response",
      "headers": {
      "message": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  },
  "invalidTopicsError": {
    "description": "APIInvalidTopicsError is error format response to invalid topics",
      "headers": {
      "invalidTopics": {
        "type": "array",
          "items": {
          "type": "string"
        }
      },
      "message": {
        "type": "string"
      }
    }
  },
  "notFound": {
    "description": "APINotFound is a not found empty response"
  },
  "parameterBodies": {
    "description": "parameterBodies",
      "schema": {
      "$ref": "#/definitions/CreatePushMirrorOption"
    }
  },
  "redirect": {
    "description": "APIRedirect is a redirect response"
  },
  "string": {
    "description": "APIString is a string response",
      "schema": {
      "type": "string"
    }
  },
  "validationError": {
    "description": "APIValidationError is error format response related to input validation",
      "headers": {
      "message": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  }
},
  "securityDefinitions": {
  "AccessToken": {
    "type": "apiKey",
      "name": "access_token",
      "in": "query"
  },
  "AuthorizationHeaderToken": {
    "description": "API tokens must be prepended with \"token\" followed by a space.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
  },
  "BasicAuth": {
    "type": "basic"
  },
  "SudoHeader": {
    "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "type": "apiKey",
      "name": "Sudo",
      "in": "header"
  },
  "SudoParam": {
    "description": "Sudo API request as the user provided as the key. Admin privileges are required.",
      "type": "apiKey",
      "name": "sudo",
      "in": "query"
  },
  "TOTPHeader": {
    "description": "Must be used in combination with BasicAuth if two-factor authentication is enabled.",
      "type": "apiKey",
      "name": "X-GITEA-OTP",
      "in": "header"
  },
  "Token": {
    "type": "apiKey",
      "name": "token",
      "in": "query"
  }
},
  "security": [
  {
    "BasicAuth": []
  },
  {
    "Token": []
  },
  {
    "AccessToken": []
  },
  {
    "AuthorizationHeaderToken": []
  },
  {
    "SudoParam": []
  },
  {
    "SudoHeader": []
  },
  {
    "TOTPHeader": []
  }
]
}
